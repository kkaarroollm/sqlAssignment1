-- vertical join

SELECT c.ID as CustomerID, c.FIRST_NAME, c.LAST_NAME, b.ID as BookingID, b.BOOKING_DATE
FROM Customer c
JOIN Booking b ON c.ID = b.ID;

-- self join

SELECT e1.ID AS EmployeeID, e1.LAST_NAME AS Employee, e2.LAST_NAME AS Manager
FROM Employee e1
JOIN Employee e2 ON e1.MANAGER_ID = e2.ID;

-- inner join
SELECT c.FIRST_NAME, c.LAST_NAME, b.BOOKING_DATE, b.TOTAL_PRICE
FROM Customer c
JOIN Booking b ON c.ID = b.CUSTOMER_ID;

-- non equi join

SELECT t.ID AS TourID, t.NAME AS TourName, tg.TOUR_GUIDES_ID AS GuideID
FROM Tour t
JOIN TourGuides tg ON t.id = tg.tour_id
WHERE t.PRICE_PER_PERSON > 2000
AND EXISTS (
    SELECT * FROM Guides g
    WHERE g.id = tg.TOUR_GUIDES_ID AND g.RATING > 7
);

SELECT FIRST_NAME, LAST_NAME, NVL(MANAGER_ID, 0) as MANAGER_IS_ZERO
FROM EMPLOYEE;

SELECT FIRST_NAME, LAST_NAME FROM CUSTOMER WHERE FIRST_NAME LIKE 'C%';

SELECT FIRST_NAME, PHONE FROM GUIDES WHERE RATING IN (8, 9, 10);

SELECT NAME, START_DATE FROM Tour ORDER BY START_DATE DESC;

SELECT FIRST_NAME, LAST_NAME FROM Employee WHERE SALARY > ALL (SELECT SALARY FROM Employee WHERE Position = 'Tour Guide');

SELECT * FROM BOOKING WHERE NUMBER_OF_PARTICIPANTS > ANY (SELECT NUMBER_OF_PARTICIPANTS FROM BOOKING WHERE BOOKING_DATE = TO_DATE('2024-07-04', 'YYYY-MM-DD'));

SELECT FIRST_NAME, LAST_NAME FROM EMPLOYEE e WHERE EXISTS (SELECT * FROM BOOKING b WHERE b.AGENT_ID = e.ID);

SELECT FIRST_NAME, LAST_NAME FROM EMPLOYEE e WHERE NOT EXISTS (SELECT * FROM BOOKING b WHERE b.AGENT_ID = e.ID);

SELECT TOUR_ID, COUNT(*) AS TotalBookings FROM BOOKING
GROUP BY TOUR_ID
HAVING COUNT(*) > 1;

SELECT TOUR_ID, SUM(NUMBER_OF_PARTICIPANTS) AS TotalParticipants
FROM BOOKING
GROUP BY TOUR_ID
HAVING SUM(NUMBER_OF_PARTICIPANTS) > 3;

SELECT TOUR_ID, SUM(NUMBER_OF_PARTICIPANTS * TOTAL_PRICE) AS OverallIncome
FROM BOOKING
GROUP BY TOUR_ID
HAVING SUM(NUMBER_OF_PARTICIPANTS * TOTAL_PRICE) > 10000;

SELECT TOTAL_PRICE FROM BOOKING GROUP BY TOTAL_PRICE HAVING COUNT(*) > 1;

SELECT *
FROM BOOKING b
WHERE b.NUMBER_OF_PARTICIPANTS > (SELECT AVG(NUMBER_OF_PARTICIPANTS) FROM BOOKING WHERE TOUR_ID = b.TOUR_ID);

SELECT TOUR_ID, AVG(NUMBER_OF_PARTICIPANTS) AS AVG_NUMBER FROM BOOKING GROUP BY TOUR_ID;

SELECT FIRST_NAME, LAST_NAME, SALARY
FROM Employee
WHERE SALARY > (SELECT AVG(SALARY) FROM Employee);
